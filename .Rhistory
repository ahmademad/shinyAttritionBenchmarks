int t_ = as<int>(ts);
Rcpp::NumericVector theta(b);
int size = x.size();
if(s == 1) {
Rcpp::NumericVector xab(size, NA);
return xab;
}
if(s == 2) {
Rcpp::NumericVector xab(size, 0);
return xab;
}
if(s == t_+2) {
Rcpp::NumericVector xab(size, 1);
}
Rcpp::NumericVector xab(size, 1);
return wrap(xab);
}
"
dtest1 = cxxfunction(signature( a = "numeric", b="numeric", ns="integer", ts="integer" ), body=src,
plugin='Rcpp')
src <- "
Rcpp::NumericVector x(a);
Rcpp::NumericVector theta(b);
int s = as<int>(ns);
int t_ = as<int>(ts);
int size = x.size();
if(s == 1) {
Rcpp::NumericVector xab(size, NA);
return xab;
}
if(s == 2) {
Rcpp::NumericVector xab(size, 0);
return xab;
}
if(s == t_+2) {
Rcpp::NumericVector xab(size, 1);
return xab;
}
Rcpp::NumericVector xab(size, 1);
xab = pnorm((theta[s]- theta[2]*x)/R);
return wrap(xab);
}
"
dtest1 = cxxfunction(signature( a = "numeric", b="numeric", ns="integer", ts="integer" ), body=src,
plugin='Rcpp')
src <- "
Rcpp::NumericVector x(a);
Rcpp::NumericVector theta(b);
int s = as<int>(ns);
int t = as<int>(ts);
int size = x.size();
double R = 1-theta[2];
if(s == 1) {
Rcpp::NumericVector xab(size, NA);
return xab;
}
if(s == 2) {
Rcpp::NumericVector xab(size, 0);
return xab;
}
if(s == t_+2) {
Rcpp::NumericVector xab(size, 1);
return xab;
}
Rcpp::NumericVector xab(size, 1);
xab = pnorm((theta[s]- theta[2]*x)/R);
return wrap(xab);
}
"
dtest1 = cxxfunction(signature( a = "numeric", b="numeric", ns="integer", ts="integer" ), body=src,
plugin='Rcpp')
src <- "
Rcpp::NumericVector x(a);
Rcpp::NumericVector theta(b);
int s = as<int>(ns);
int t = as<int>(ts);
int size = x.size();
double R = 1-theta[2];
if(s == 1) {
Rcpp::NumericVector xab(size, NA);
return xab;
}
if(s == 2) {
Rcpp::NumericVector xab(size, 0);
return xab;
}
if(s == t+2) {
Rcpp::NumericVector xab(size, 1);
return xab;
}
Rcpp::NumericVector xab(size, 1);
xab = pnorm((theta[s]- theta[2]*x)/R);
return wrap(xab);
}
"
dtest1 = cxxfunction(signature( a = "numeric", b="numeric", ns="integer", ts="integer" ), body=src,
plugin='Rcpp')
src <- "
Rcpp::NumericVector x(a);
Rcpp::NumericVector theta(b);
int s = as<int>(ns);
int t = as<int>(ts);
int size = x.size();
double R = 1-theta[2];
if(s == 1) {
Rcpp::NumericVector xab(size, NA);
return xab;
}
if(s == 2) {
Rcpp::NumericVector xab(size, 0);
return xab;
}
if(s == t+2) {
Rcpp::NumericVector xab(size, 1);
return xab;
}
Rcpp::NumericVector xab(size, 1);
return wrap(xab);
}
"
dtest1 = cxxfunction(signature( a = "numeric", b="numeric", ns="integer", ts="integer" ), body=src,
plugin='Rcpp')
src <- 'int n = as<int>(ns);
double x = as<double>(xs);
for (int i=0; i<n; i++) x=1/(1+x);
return wrap(x);'
l <- cxxfunction(signature(ns="integer",
xs="numeric"),
body=src, plugin="Rcpp")
src <- 'int n = as<int>(ns);
double x = as<double>(xs);
for (int i=0; i<n; i++) x=1/(1+x);
return wrap(x);'
src
l <- cxxfunction(signature(ns="integer",
xs="numeric"),
body=src, plugin="Rcpp")
dtest1 = cxxfunction(signature( x = "numeric"),
'Rcpp::NumericVector xx(x);
return::wrap(dnorm(xx, 0.0, 1.0));',
plugin='Rcpp')
require(RTools)
rm(list=ls())
rm(list=ls())
rm(list=ls())
require(edsurvey)
sdf <- readSDF(system.file("extdata/data", "M36NT2PM.dat", package = "NAEPprimer"))
source("Z:/Ahmad/edsurvey/R/achievementLevels.R")
aLevels <- achievementLevels(c("composite","dsex", "b017451"),aggregateBy = "dsex", sdf,
recode=list(
b017451=list(
from=c("Never or hardly ever",
"Once every few weeks","About once a week"),
to=c("Infrequently")),
b017451=list(
from=c("2 or 3 times a week","Every day"),
to=c("Frequently"))))
source("Z:/Ahmad/edsurvey/R/achievementLevels.R")
aLevels <- achievementLevels(c("composite","dsex", "b017451"),aggregateBy = "dsex", sdf,
recode=list(
b017451=list(
from=c("Never or hardly ever",
"Once every few weeks","About once a week"),
to=c("Infrequently")),
b017451=list(
from=c("2 or 3 times a week","Every day"),
to=c("Frequently"))))
aLevels
install.packages("Z:/Ahmad/edsurvey_0.9.0.tar.gz", type="source", repos=NULL)
require(edsurvey)
?lm.sdf
?edsurveyTable
2542+150
-1300
2692-1300
setwd("Z:/Ahmad/edsurvey/")
require(roxygen2)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
install.packages("Z:/Ahmad/edsurvey_0.9.2.tar.gz", type="source",repos=NULL)
require(edsurvey)
?achievementLevels
roxygenise()
require(roxygen2)
setwd("Z:/Ahmad/edsurvey/")
roxygenise()
require(edsurvey)
achievementLevels(c("composite"), aggregateBy = NULL, sdf) 
sdf <- readSDF(system.file("extdata/data", "M36NT2PM.dat", package = "NAEPprimer"))
achievementLevels(c("composite"), aggregateBy = NULL, sdf) 
traceback()
achievementLevels(c("composite"), aggregateBy = c("composite"), sdf) 
achievementLevels(achievementVars = c("composite"), aggregateBy = c("composite"), sdf) 
?achievementLevels
achievementLevels()
achievementLevels
require(roxygen2)
setwd("Z:/Ahmad/edsurvey/")
roxygenise()
install.packages("Z:/Ahmad/edsurvey_0.9.2.tar.gz", type="source",repos=NULL)
require(edsurvey)
sdf <- readSDF(system.file("extdata/data", "M36NT2PM.dat", package = "NAEPprimer"))
aLevels <- achievementLevels(c("composite", "dsex"),aggregateBy = c("composite"), sdf, returnCumulative = TRUE)
library(shiny)
setwd("H:/share/Attrition Benchmarks/03.SecondaryAnalysis/Benchmark Tool")
?runApp
setwd("H:/share/Attrition Benchmarks/03.SecondaryAnalysis/Benchmark Tool/AttritionBenchmarks/")
runApp()
runApp()
runApp()
?mainPanel
?mainPanel
runApp()
runApp()
runApp()
runApp()
description <- read.csv("./data/description.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/abs_benchmarktool_sourcedata_public.csv", stringsAsFactors = FALSE, sep="\t")
head(description)
head(data)
strsplit(data$subgrp, "_")[[1]]
strsplit(data$subgrp, "_")
head(data)
head(sapply(strsplit(data$subgrp, "_"), "[", 1))
data$group1 <- sapply(strsplit(data$subgrp, "_"), "[", 1)
data$group2 <- sapply(strsplit(data$subgrp, "_"), "[", 2)
data$group3 <- sapply(strsplit(data$subgrp, "_"), "[", 3)
head(data)
head(description)
table(data$period)
table(data$Type)
table(description$Type)
data$group4 <- "Elementary"
data$group4[data$period %in% c("10 to 12", "9 to 11")] <- "High School"
head(data)
head(description)
View(description)
runApp()
runApp()
description <- read.csv("./data/description.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/abs_benchmarktool_sourcedata_public.csv", stringsAsFactors = FALSE, sep="\t")
data$group1 <- sapply(strsplit(data$subgrp, "_"), "[", 1)
data$group2 <- sapply(strsplit(data$subgrp, "_"), "[", 2)
data$group3 <- sapply(strsplit(data$subgrp, "_"), "[", 3)
data$group4 <- "Elementary"
data$group4[data$period %in% c("10 to 12", "9 to 11")] <- "High School"
transitions <- unique(data$transition)
transitions
head(data)
description <- read.csv("./data/description.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/abs_benchmarktool_sourcedata_public.csv", stringsAsFactors = FALSE, sep="\t")
data$group1 <- sapply(strsplit(data$subgrp, "_"), "[", 1)
data$group2 <- sapply(strsplit(data$subgrp, "_"), "[", 2)
data$group3 <- sapply(strsplit(data$subgrp, "_"), "[", 3)
data$group4 <- "Elementary"
data$group4[data$period %in% c("10 to 12", "9 to 11")] <- "High School"
transitions <- unique(data$transition)
runApp()
runApp()
description <- read.csv("./data/description.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/abs_benchmarktool_sourcedata_public.csv", stringsAsFactors = FALSE, sep="\t")
data$group1 <- sapply(strsplit(data$subgrp, "_"), "[", 1)
data$group2 <- sapply(strsplit(data$subgrp, "_"), "[", 2)
data$group3 <- sapply(strsplit(data$subgrp, "_"), "[", 3)
data$group4[data$period %in% c("10 to 12", "9 to 11")] <- "High School"
overall <- unique(description$Notation[description$Level == "Overall"])
school <- unique(description$Notation[description$Level == "School"])
student <- unique(description$Notation[description$Level == "Student"])
transitions <- unique(data$period)
data$group4 <- "Elementary"
description <- read.csv("./data/description.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/abs_benchmarktool_sourcedata_public.csv", stringsAsFactors = FALSE, sep="\t")
data$group1 <- sapply(strsplit(data$subgrp, "_"), "[", 1)
data$group2 <- sapply(strsplit(data$subgrp, "_"), "[", 2)
data$group3 <- sapply(strsplit(data$subgrp, "_"), "[", 3)
data$group4 <- "Elementary"
data$group4[data$period %in% c("10 to 12", "9 to 11")] <- "High School"
transitions <- unique(data$period)
overall <- unique(description$Notation[description$Level == "Overall"])
school <- unique(description$Notation[description$Level == "School"])
student <- unique(description$Notation[description$Level == "Student"])
student
runApp()
runApp()
runApp()
runApp()
head(description)
runApp()
125*4
require(igraph)
g <- make_empty_graph(10, directed = FALSE)
V(g)$name <- letters[1:10]
g <- add_edges(g, c('a', 'b', 'a', 'e', 'a', 'f', 'b', 'c', 'b', 'g', 'c', 'h', 'c', 'd',
'd', 'e', 'd', 'i', 'e', 'j', 'f', 'h', 'f', 'i', 'g', 'j', 'g', 'i',
'h', 'j'))
tkplot(g)
?tkplot
tkplot(g, vertex.color="green")
5%/%2
5%/%2
5%%2
A9 <- function(n) {
j = 1
sum = 1
while (j < n) {
k = j
while (k < n) {
sum <- sum +1
if(k %%2 != 0)
k <- k + 1
else
k= k + 0.01 * n
}
j <- j + 0.1 * n
}
}
N <- seq(10, 100000, 1000)
counts <- sapply(N, A9)
#########################
#### O(1)
#########################
A9 <- function(n) {
j = 1
sum = 1
while (j < n) {
k = j
while (k < n) {
sum <- sum +1
if(k %%2 != 0)
k <- k + 1
else
k= k + 0.01 * n
}
j <- j + 0.1 * n
}
return(sum)
}
N <- seq(10, 100000, 1000)
counts <- sapply(N, A9)
N <- seq(10, 10000, 1000)
counts <- sapply(N, A9)
counts
N
plot(N, counts)
A9(1)
A9(2)
summary(lm(counts~N))
A9 <- function(n) {
j = 1
sum = 1
while (j < n) {
k = j
while (k < n) {
sum <- sum +1
#if(k %%2 != 0)
#  k <- k + 1
#else
k= k + 0.01 * n
}
j <- j + 0.1 * n
}
return(sum)
}
N <- seq(10, 10000, 1000)
counts <- sapply(N, A9)
counts
N
A9 <- function(n) {
j = 1
sum = 1
while (j < n) {
k = j
while (k < n) {
sum <- sum +1
if(k %%2 != 0)
k <- k + 1
else
k= k + 0.01 * n
}
j <- j + 0.1 * n
}
return(sum)
}
N <- seq(10, 10000, 1000)
counts <- sapply(N, A9)
N
counts
N/counts
B9 <- function(n) {
sum = 1
j = 1
while (j < n) {
k = j
while (k < n) {
sum <- sum + 1
k = k * 2
}
j <- j + log2(n)
}
return(sum)
}
N <- seq(10, 100000, 1000)
counts <- sapply(N, B9)
counts
N
plot(N, counts)
plot(counts, N)
N/counts
log2(N)/counts
summary(lm(counts ~ log2(N)))
summary(lm(counts ~ N)
)
B9 <- function(n) {
sum = 1
j = 1
while (j < n) {
k = j
#while (k < n) {
sum <- sum + 1
# k = k * 2
#}
j <- j + log2(n)
}
return(sum)
}
N <- seq(10, 100000, 1000)
counts <- sapply(N, B9)
N
counts
(N/log2(N))/ counts
#####################
C8 <- function(n) {
j = 1
sum <- 1
while (j < n) {
k = j
while (k < n) {
sum <- sum + 1
k <- k + 2
}
j <- j + 1
}
return(sum)
}
N <- seq(10, 10000, 1000)
counts <- sapply(N, C8)
N <- seq(10, 1000, 100)
counts <- sapply(N, C8)
N
counts
N*N/counts
plot(N^2, counts)
plot(N, counts)
summary(lm(counts~N))
summary(lm(counts~N*N))
summary(lm(counts~(N*N)))
summary(lm(counts~I(N*N)))
counts <- sapply(N, B9)
summary(lm(counts~N))
N <- seq(10, 100000, 1000)
counts <- sapply(N, B9)
summary(lm(counts~N))
A8 <- function(n) {
sum <- 1
j <- 1
for(i in c(1:n)) {
k <- i
while(k <n) {
sum <- sum + 1
k <- k + n^(1/3)
}
}
return(sum)
}
N <- seq(10, 1000, 100)
counts <- sapply(N, A8)
summary(lm(counts~I(N*N)))
N
counts
summary(lm(I(log(counts))~I(log(N))))
5/3
C7 <- function(n) {
i <- 1
sum <- 1
while(i < n) {
j <- i
while(j < n) {
k <- j
while(k < n) {
sum <- sum + 1
k <- k + 1
}
if(j == 3 *i) {
j <- n
}
j <- j+ 1
}
i <- i + 1
}
return(sum)
}
N <- seq(10, 1000, 100)
counts <- sapply(N, C7)
N <- seq(10, 100, 10)
counts <- sapply(N, C7)
N
counts
summary(lm(I(log(counts))~I(log(N))))
log2(3)
